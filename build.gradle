buildscript {
	ext { springBootVersion = '1.4.3.RELEASE' }
	repositories { mavenCentral() }
	dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

configurations {
	providedRuntime
}

sourceCompatibility = 1.7

repositories { mavenCentral() }


dependencies {
	compile ('org.springframework.security:spring-security-core:4.2.0.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile ('mysql:mysql-connector-java:5.1.6')
	compile group: 'org.springframework', name: 'spring-tx', version: '4.3.8.RELEASE'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def configFiles = [
	'application.properties',
	'logback.xml'] as Set
	

jar {
	baseName = 'kado-mail-service'
	version = '0.1.0'
	exclude configFiles
}

task copyConfiguration(type: Copy) {
	def config = file("$buildDir/config")
	config.mkdirs()
	from('src/main/resources') {
		configFiles.each { include it }
	}
	into "$buildDir/config"
}

startScripts {
	defaultJvmOpts = ['-Xmx256m', '-Xms64m', '-server', '-XX:-OmitStackTraceInFastThrow',
						'-XX:+UseConcMarkSweepGC', '-XX:+CMSClassUnloadingEnabled',
						'-XX:+AggressiveOpts', '-XX:+UseStringCache']
	applicationName = 'run'
	println "Appending config folder into classpath in $project.name"
	classpath += files("$buildDir/config")
	doLast {
		def windowsScriptFile = file getWindowsScript()
		def unixScriptFile = file getUnixScript()
		windowsScriptFile.text = windowsScriptFile.text.replace("lib\\config", "config")
		unixScriptFile.text = unixScriptFile.text.replace("lib/config", "config/")
		windowsScriptFile.text = windowsScriptFile.text.replace("APP_NAME=\"run\"", "APP_NAME=\"$project.name\"")
		unixScriptFile.text = unixScriptFile.text.replace("APP_NAME=\"run\"", "APP_NAME=\"$project.name\"")
	}
}

applicationDistribution.from(copyConfiguration) { into "config" }

[distTar, distZip]*.dependsOn(copyConfiguration)
[distTar, distZip]*.doLast {
	ant.checksum file: it.archivePath
}
	
